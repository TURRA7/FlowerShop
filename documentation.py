#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#/////
#///// Класс: UserAdmin(UserMixin, db.Model)
#///// Создаёт и указывает на таблицу для хранения данных об администраторах,
#///// и имеет 3 переменных(колонки): 
#///// "id" - id объекта
#///// "username" - Логин пользователя
#///// "password" - Пороль пользователя
#/////
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#/////
#///// Класс: Item(UserMixin, db.Model)
#///// Создаёт и указывает на таблицу для хранения товаров,
#///// и имеет метод "init" и 6 переменных(колонок): 
#///// "id" - id объекта
#///// "name" - Название товара
#///// "description" - Описание товара
#///// "price" - Цена товара
#///// "category" - Категория товара
#///// "photo" - Ссылка на фото для карточки товара
#///// 
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#/////
#///// Класс: Article(UserMixin, db.Model) Создаёт таблицу для хранения статей,
#///// статей, и имеет 5 переменных(колонок):
#///// "id" - id объекта
#///// "name_article" - Название статьи
#///// "text_article" - Описание статьи
#///// "photo_article" - Ссылка на фото для статьи
#///// "pub_date" - Дата публикации
#/////
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#/////
#///// Класс: Checking
#///// Создаёт методы для разного рода проверок.
#///// 
#///// Метод: check_admin
#///// Проверяет, является ли пользователь администратором, путём проверки.
#///// авторизации методом "is_authenticated" (Flask-SQLAlchemy).
#///// 
#///// Метод: check_name
#///// Проверяет, чтобы строка имела длину от 3-х до 15 символов,
#///// выдаёт булево значение, в зависимости от результата проверки.
#///// 
#///// Метод: check_description
#///// Проверяет, чтобы строка имела длину от 3-х символов,
#///// выдаёт булево значение, в зависимости от результата проверки.
#///// 
#///// Метод: check_latin
#///// Проверяет чтобы значение не содержало символов из 
#///// латинского(английского алфавита),
#///// выдаёт булево значение, в зависимости от результата проверки.
#///// 
#///// Метод: check_category
#///// Проверяет, чтобы значение было от "1" до "8",
#///// выдаёт булево значение, в зависимости от результата проверки.
#///// 
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#/////
#///// Класс: AdminLoginForm
#///// 
#///// Определение формы входа администратора с использованием Flask-WTF
#///// 
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#/////
#///// Класс: DeleteItemsForm
#///// 
#///// Определение формы для удаления новостей
#///// 
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#/////
#///// Класс: AddArticleForm
#///// 
#///// Определение формы для добавления новостей
#///// 
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#/////
#///// Класс: AddItemForm
#///// 
#///// Определение формы для добавления товаров
#///// 
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#/////
#///// Класс: DeleteArticleForm
#///// 
#///// Определение формы для удаления статей
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////


#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#///// Функция: load_user
#/////
#///// Захватывает id ползователя и передаёт его в сессию для идентификации 
#///// и присваивании соответствующих прав.
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#///// Функция: index
#/////
#///// Является обработчиком главной страницы сайта, в рендер передаётся функция
#///// функция "render_template" с указанием соответствующего html документа для
#///// обработки шаблона и "check_total", в который передаётся экземпляр
#///// класса "Checking" с методом "check_admin" - который проверяет пользовате
#///// пользователя на его права (администратора).
#/////
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#///// Функция: admin_login
#/////
#///// Является методом логгировнаия пользователя, который получает введённые
#///// данные из формы авторизации, проверяет CSRF токен, сверяет их с 
#///// данными с базе и авторизирует пользователя, давая ему права 
#///// администратора.
#/////
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#///// Функция: logout
#/////
#///// Является методом выхода из админ-меню. Удаляет текущий "id" из сессии
#///// и собствено из авторизации.
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#///// Функция: admin_menu
#/////
#///// Является обработчиком меню(для админов), в рендер передаётся функция
#///// функция "render_template" с указанием соответствующего html документа 
#///// для обработки шаблона и "check_total", в который передаётся экземпляр
#///// класса "Checking" с методом "check_admin" - который проверяет пользовате
#///// пользователя на его права (администратора).
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#///// Функция: admin_panel/admin_article
#/////
#///// Созданна для добавления новых товаров/статей (объектов) в базу данных. 
#///// "Функция-обработчик проверяет запрос на метод "POST", проверяет CSRF 
#///// токен, далее  присваимвает переменным соответствующие реквест-запросы 
#///// из полей для ввода(в html), далее происходит проверка имени файла(фото), 
#///// далее с помощью класса Checking и соответствующих методов, происходит 
#///// проверка полученных данных, после чего, если все данные прошли проверку, 
#///// создаётся объект в базе данных, в который сохраняются данны, полученые 
#///// из формы, далее происходит коммит и редирект на эту же страницу
#///// (обновление), функция обрабатывает шаблон с помощью функция 
#///// "render_template" с указанием соответствующего html документа 
#///// для обработки шаблона и "check_total", в который передаётся экземпляр
#///// класса "Checking" с методом "check_admin" - который проверяет 
#///// пользователя на его права (администратора).
#/////
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#///// Функции: store_news, flowers, bouquets, baskets, indoor, artificial,
#///// wreaths, toys и fireworks:
#///// 
#///// Являются обработчиками одноимённых страниц. Они присваивают переменной
#///// "page" страницу, отсносительно объектов в базе данных и
#///// колличеству указанных объектов на одной странице, затем в переменную
#///// "products" передаётся запрос, фильтруемый по категории товара, далее
#///// подключается пагинация, в которую передаётся объект страницы и общее
#///// колличество страниц. Далее если пользователь является администратором,
#///// если проверка пройдена у админа появляются кнопки "удалить под каждым
#///// объектом, далее "функция-обработчик проверяет запрос на метод "POST", 
#///// проверяет CSRF токен, если проверка пройдена, при нажатии на кнопку,
#///// объект удаляется из базы данных и происходит коммит, функция-обработчик
#///// применяет метод "render_template" с указанием соответствующего
#///// html документа для Обработки шаблона. С передачей в него параметров
#///// "products.items" - объекты из базы данных, "pagination" - объект 
#///// класса пагинации, "total_pages" - общее колличество страниц,
#///// с учётом колличества объектов в базе данных и "check_total", в который
#///// передаётся экземпляр класса "Checking" с методом "check_admin"- который
#///// проверяет пользователя на его права (администратора).
#///// 
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
#///// Функция: page_not_found
#/////
#///// Является обработчиком главной страницы сайта, в рендер передаётся функция
#///// функция "render_template" с указанием соответствующего html документа для
#///// обработки шаблона.
#/////////////////////////////////////////////////////////////////////////////
#/////////////////////////////////////////////////////////////////////////////
